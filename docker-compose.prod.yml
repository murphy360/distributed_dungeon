services:
  # Database Services
  database:
    image: postgres:15-alpine
    container_name: dungeon_postgres_prod
    environment:
      POSTGRES_DB: dungeon_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - dungeon_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dungeon_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: dungeon_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - dungeon_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Core Services (Production)
  dungeon-master:
    build:
      context: ./services/dungeon-master
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_NAME=dungeon-master
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${DUNGEON_MASTER_REPLICAS:-1}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  dungeon:
    build:
      context: ./services/dungeon
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SERVICE_NAME=dungeon
      - DUNGEON_MASTER_URL=http://dungeon-master:3001
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${DUNGEON_SERVICE_REPLICAS:-2}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  monster:
    build:
      context: ./services/monster
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERVICE_NAME=monster
      - DUNGEON_MASTER_URL=http://dungeon-master:3001
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${MONSTER_SERVICE_REPLICAS:-3}
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  player:
    build:
      context: ./services/player
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERVICE_NAME=player
      - DUNGEON_MASTER_URL=http://dungeon-master:3001
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${PLAYER_SERVICE_REPLICAS:-2}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  communication:
    build:
      context: ./services/communication
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - SERVICE_NAME=communication
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${COMMUNICATION_SERVICE_REPLICAS:-1}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  rules-engine:
    build:
      context: ./services/rules-engine
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD}@database:5432/dungeon_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SERVICE_NAME=rules-engine
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${RULES_ENGINE_REPLICAS:-2}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: dungeon_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - dungeon-master
      - dungeon
      - monster
      - player
      - communication
      - rules-engine
    networks:
      - dungeon_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dungeon_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local